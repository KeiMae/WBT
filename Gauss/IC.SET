/* -----------------------------------------------------------------------
  "Testing for Multiple Bubbles" by Phillips, Shi and Yu (2011)
    
    In this program, we calculate the ADF statistic with a fixed
    lag order.

  if flag=1 use ADF with constant & without trend
  if flag=2 use ADF with constant & trend
  if flag=3 use ADF without constant & trend

------------------------------------------------------------------------- */
proc IC(y,adflag,flag,IC);

  local t1,const,trend,tval,y1,dy,dy0,i,du,dt,x,beta,IC0,IC1,ICC,
        ADF0,ADF1,ADF,lag,T,eps,sig,k,there,t2,x1,x2,j,dy01,tvalue;
        

 t1=rows(y)-1; const=ones(t1,1); trend=seqa(1,1,t1);

 if flag==1; tval=zeros(t1,2*2+1); endif;
 if flag==2; tval=zeros(t1,3*2+1); endif;
 if flag==3; tval=zeros(t1,1*2+1); endif;

 y1  = y[rows(y)-t1:rows(y)-1];
 dy  = y[2:rows(y)] - y[1:rows(y)-1];
 dy0 = dy[rows(dy)-t1+1:rows(dy)];
 x=y1;
 

 if flag==1;                   x=x~const; endif;
 if flag==2;                   x=x~const~trend; endif;
 if flag==3;                   x=x; endif;
 x1=x;


 /******** when k=0 ************************/
 t2=t1;
 x2=x1[rows(x1)-t2+1:rows(x1),.];         // @-from k+1 to the end (including y1 and x)-@
 dy01=dy0[rows(dy0)-t2+1:rows(dy0)];      // @-from k+1 to the end (including dy0)-@

 beta = inv(x2'x2)*x2'dy01;                               // @-model A-@
 eps  = dy01 - x2*beta;
 T=rows(eps);

 if IC==1;               @ AIC @
    IC0=-2*sumc(ln(pdfn(eps)))/T+2*rows(beta)/T;
 elseif IC==2;           @ BIC @
    IC0=-2*sumc(ln(pdfn(eps)))/T+rows(beta)*ln(T)/T;
 endif;
   
 if flag==1; sig = sqrt ( diag ( eps'eps/(t2-2) * inv(x2'x2) ) ); endif;
 if flag==2; sig = sqrt ( diag ( eps'eps/(t2-3) * inv(x2'x2) ) ); endif;
 if flag==3; sig = sqrt ( diag ( eps'eps/(t2-1) * inv(x2'x2) ) ); endif;
   
 ADF0=beta[1]/sig[1];


/******** when k>0 ************************/
if adflag>0;
 k=adflag;
 IC1=zeros(adflag,1);
 ADF1=zeros(adflag,1);
 do while k>0;
   t2=t1-k;
   x2=x1[rows(x1)-t2+1:rows(x1),.];         // @-from k+1 to the end (including y1 and x)-@
   dy01=dy0[rows(dy0)-t2+1:rows(dy0)];      // @-from k+1 to the end (including dy0)-@
   
   
   j=1; 
   do while j<=k; 
      x2=x2~dy[rows(dy)-t2+1-j:rows(dy)-j];     // @-including k lag variables of dy in x2-@
      j=j+1; 
   endo;
  
   beta = inv(x2'x2)*x2'dy01;                               // @-model A-@
   eps  = dy01 - x2*beta;
   
   T=rows(eps);
  

 if IC==1;               @ AIC @
    IC1[k]=-2*sumc(ln(pdfn(eps)))/T+2*rows(beta)/T;
 elseif IC==2;           @ BIC @
    IC1[k]=-2*sumc(ln(pdfn(eps)))/T+rows(beta)*ln(T)/T;
 endif;
   
   if flag==1; sig = sqrt ( diag ( eps'eps/(t2-adflag-2) * inv(x2'x2) ) ); endif;
   if flag==2; sig = sqrt ( diag ( eps'eps/(t2-adflag-3) * inv(x2'x2) ) ); endif;
   if flag==3; sig = sqrt ( diag ( eps'eps/(t2-adflag-1) * inv(x2'x2) ) ); endif;
   
   ADF1[k]=beta[1]/sig[1];
  k=k-1;
 endo;
endif;

ICC=IC0|IC1;
ADF=ADF0|ADF1;  

LAG=minindc(ICC);

retp(lag);


  
endp;
